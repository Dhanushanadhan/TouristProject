import cx_Oracle

# Establish Oracle connection
def connect_to_db():
    username = "system"
    password = "system"
    dsn = cx_Oracle.makedsn("localhost", 1521, service_name="XE")
    return cx_Oracle.connect(username, password, dsn)

def create_users_table(cursor):
    cursor.execute('''
        CREATE TABLE users (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
            name VARCHAR2(100),
            email VARCHAR2(100) UNIQUE,
            password VARCHAR2(100),
            PRIMARY KEY (id)
        )
    ''')
    # Commit the changes to the database
    cursor.connection.commit()

def create_admins_table(cursor):
    cursor.execute('''
        CREATE TABLE admins (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
            name VARCHAR2(100),
            email VARCHAR2(100) UNIQUE,
            password VARCHAR2(100),
            PRIMARY KEY (id)
        )
    ''')
    # Commit the changes to the database
    cursor.connection.commit()


def create_tourists_table(cursor):
    cursor.execute('''
        CREATE TABLE Tourists (
            tourist_id varchar(10) PRIMARY KEY,
            name VARCHAR2(100),
            email VARCHAR2(100),
            phone_number VARCHAR2(20),
            nationality VARCHAR2(50),
            address VARCHAR2(255)
        )
    ''')
    cursor.connection.commit()

def create_destinations_table(cursor):
    cursor.execute('''
        CREATE TABLE Destinations (
            destination_id VARCHAR2(20) PRIMARY KEY,
            name VARCHAR2(100),
            description VARCHAR2(255),
            city VARCHAR2(50),
            country VARCHAR2(50),
            cost_per_day NUMBER(10, 2)
        )
    ''')
    cursor.connection.commit()

def create_bookings_table(cursor):
    cursor.execute('''
        CREATE TABLE Bookings (
            booking_id VARCHAR2(20) PRIMARY KEY,
            tourist_id VARCHAR2(10),
            destination_id VARCHAR2(20),
            check_in_date DATE,
            check_out_date DATE,
            total_cost NUMBER(10, 2),
            number_of_people NUMBER,
            number_of_days NUMBER,
            FOREIGN KEY (tourist_id) REFERENCES Tourists(tourist_id),
            FOREIGN KEY (destination_id) REFERENCES Destinations(destination_id)
        )
    ''')
    cursor.connection.commit()


def check_table_exists(cursor, table_name):
    cursor.execute("SELECT count(*) FROM user_tables WHERE table_name = :1", (table_name,))
    table_count = cursor.fetchone()[0]
    return table_count > 0

